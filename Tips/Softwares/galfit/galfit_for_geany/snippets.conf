# Author : Bhishan Poudel
# Source : https://wiki.geany.org/snippets/python/start


## Note :   % = %%    \s = \\s


# Geany's snippets configuration file
#
# use \n or %newline% for a new line
# (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step,
# it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work,
# use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion.
# You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the
#      next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite
# default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names'
# for a full list.
#
# Additionally, you can use most of the template wildcards
# like {developer}, {command:...}, or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections

# [Default]  [Special]  [Keybindings]
# [ActionScript] [C]  [C++]  [C#]
# [Erlang]  [Ferite]  [Fortran]  [Gnuplot]   [Haskell]  [HTML]
# [Java]  [Javascript]  [Latex]
# [PHP] [Python] [R]  [Vala]

[Default]
date={date}
name=Bhishan Poudel
filenames=geany --ft-names
head=# Author    : {developer}\n# Date      : {date}\n\n
line=##=============================================================================
lien=##=============================================================================
lines=##=============================================================================\n##  %cursor%\n                                                               \n\n## end                                                              end    ##\n##=============================================================================\n



# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
brace_open=\n{\n\t
brace_close=}\n
block=\n{\n\t%cursor%\n}
block_cursor=\n{\n\t%cursor%\n}\n%cursor%
wordchars=._abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
[Keybindings]
for=<Ctrl>7
pre=<Ctrl>5
head=<Ctrl>4

[ActionScript]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[C]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
_ts=typedef struct\n{\n\t\n}\n%cursor%;
_s=struct %cursor%\n{\n\t\n};\n
_m=int main(int argc, char *argv[])\n{\n\treturn 0;\n}\n
#Note: change date format in Preference > Templates
head=/* Author    : {developer}\n * Date      : {date}\n */ \n
pre=/* Author      : Bhishan Poudel; Physics Graduate Student, Ohio University\n * Date        : {date}\n * Last update :\n *\n * Compile     : gcc -Wall a.c -lm\n * Run         :\n *\n *\n * Inputs      : 1.\n *\n *\n * Outputs     : 1.\n *\n * Info        :\n *\n */\n\n

pre1=/* Author      : Bhishan Poudel; Physics Graduate Student, Ohio University\n * Date        : {date}\n * Last update :\n *\n * Compile     : gcc -Wall a.c -lm\n * Run         :\n *\n *\n * Inputs      : 1.\n *\n *\n * Outputs     : 1.\n *\n * Info        :\n *\n */\n\n// preprocessor\n#include<stdio.h>\n\n// main program\nint main(int argc, char *argv[])\n{\n  %cursor%\n\nreturn 0;\n}\n
pr=printf("%cursor%\\n");


[C++]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[C#]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Erlang]
case=case %cursor% of\n\t%cursor% -> %cursor%\nend
if=if\n\t%cursor% -> %cursor%\nend
begin=begin\n\t%cursor%\nend
fun=fun(%cursor%) ->\n\t%cursor%\nend
try=try %cursor% of\n\t%cursor% ->\n\t%cursor%\ncatch\n\t%cursor% ->\n\t%cursor%\nend
module=-module(%cursor%).
export=-export(%cursor%).
compile=-compile(%cursor%).
include=-include(%cursor%).

[Ferite]
iferr=iferr%block_cursor%fix%block%
monitor=monitor%block_cursor%handle%block%

[Fortran]
func=function %cursor%()\n\timplicit none\nend function
sub=subroutine %cursor%()\n\timplicit none\nend subroutine
mod=module %cursor%\n\t\nend module
prog=program %cursor%\n\t\nend program
imp=implicit none
dim=dimension(%cursor%)
int=integer
do=do %cursor%\n\t\nend do
pre=! Author   : Bhishan Poudel\n! Date     : {date}\n\nprogram\nimplicit none\n\n  %cursor%\n\nend program

[Galfit]
pre=# Author   : Bhishan Poudel\n# Date     : {date}\n\n

[Gnuplot]

[Haskell]

[HTML]
table=<table>\n\t<tr>\n\t\t<td>%cursor%</td>\n\t</tr>\n</table>


[Java]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Javascript]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Latex]
chapter=\\chapter{%cursor%}\\label{chap:}
section=\\section{%cursor%}\\label{sec:}
subsection=\\subsection{%cursor%}\\label{subsec:}
subsubsection=\\subsubsection{%cursor%}\\label{subsubsec:}
figure=\\begin{figure}\n\t\\centering\n\t\includegraphics[]{%cursor%}\n\t\\caption{}\n\t\label{fig:}\n\\end{figure}
table=\\begin{table}\n\\centering\n\\begin{tabular}[]{%cursor%}\n\\toprule\n\t\n\\midrule\n\t\n\\bottomrule\n\\end{tabular}\n\\caption{}\n\\label{tab:}\n\end{table}
center=\\begin{center}\n\t%cursor%\n\\end{center}
includegraph=\\includegraphics[]{%cursor%}
itemize=\\begin{itemize}\n%ws%\\item %cursor%\n\\end{itemize}
enumerate=\\begin{enumerate}\n%ws%\\item %cursor%\n\\end{enumerate}
description=\\begin{description}\n%ws%\\item %cursor%\n\\end{description}
frame=\\begin{frame}\n%ws%\\frametitle{%cursor%}\n%ws%%cursor%\n\\end{frame}
block=\\begin{block}{%cursor%}\n%ws%%cursor%\n\\end{block}
align=\\begin{align}\n%cursor%\n\\end{align}
equation=\\begin{equation}\n%cursor%\n\\end{equation}
eqnarray=\\begin{eqnarray}\n%cursor%\n\\end{eqnarray}

[Matlab/Octave]
if=if ()\n  %cursor%\nelse\n  %cursor%\nend\n
ifelse=if ()\n  %cursor%\nelseif ()\n  %cursor%\nelse\n  %cursor%\nend\n
while=while ()\n    %cursor%\nend\n
pre=#!/usr/local/octave/3.8.0/bin/octave -qf \n% Author    : Bhishan Poudel \n% Date      : {date}\n\n
pre1=#!/usr/bin/octave -qf \n% Author    : Bhishan Poudel \n% Date      : {date}\n% Ref       : %cursor% \n\n
fpr=fprintf('%cursor%\\n');
pr=fprintf('%cursor%\\n');
pr=fprintf('%cursor%\\n');
head=#!/usr/bin/octave -qf \n% Author    : Bhishan Poudel \n% Date      : {date}\n\n
switch=switch true\n  case ()\n    %cursor%\n  case ()\n    %cursor%\n  case ()\n    %cursor%\n  case ()\n    %cursor%\n  otherwise\n    %cursor%\nend\n
switch_=x = 5;\nswitch true\n  case x > 10\n    fprintf(1, 'x is greater than 10\\n')\n  case x > 8\n    fprintf(1, 'x is greater than 8\\n')\n  case x < 6\n    fprintf(1, 'x is less than 6\\n')\n  case y == 3\n    fprintf(1, 'y equals three\\n')\n  otherwise\n    fprintf(1, 'no conditions were met\\n')\nend

[Phosim]
pcat=Unrefracted_RA_deg 0\nUnrefracted_Dec_deg 0\nUnrefracted_Azimuth 0\nUnrefracted_Altitude 89\nSlalib_date 1994/7/19/0.298822999997\nOpsim_rotskypos 0\nOpsim_rottelpos 0\nOpsim_moondec -90\nOpsim_moonra 180\nOpsim_expmjd 49552.3\nOpsim_moonalt -90\nOpsim_sunalt -90\nOpsim_filter 2\nOpsim_dist2moon 180.0\nOpsim_moonphase 10.0\nOpsim_obshistid 99999999\nOpsim_rawseeing 0.65\nSIM_SEED 1000\nSIM_MINSOURCE 1\nSIM_TELCONFIG 0\nSIM_CAMCONFIG 1\nSIM_VISTIME 15000.0\nSIM_NSNAP 1\nobject 0 0.0 0.0 20 ../sky/sed_flat.txt 0 0 0 0 0 0 fb.fits 0.09 0.0 none



[PHP]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Python]
utf8=#-*- coding: utf-8 -*-\n
for=for i in range(%cursor%):\n\t
doc=""" %cursor% """\n
elif=elif %cursor%:\n\t
else=else:\n\t%cursor%
if=if %cursor%:\n\t
from=from %cursor% import \n
main=if __name__ == '__main__':\n\t%cursor%
class=class %cursor%(object):\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass
def=def %cursor%(ARG: TYPE) -> TYPE:\n\t"""DOC"""\n\t
get=def get%cursor%(self): return self._var\n
set=def set%cursor%(self): self._var = var\n
try=try:\n\t%cursor%\nexcept Exception, e:\n\t
py=#!/usr/bin/env python3\n#-*- coding:utf-8 -*-\n# vim:fileencoding=utf-8\n
while=while %cursor%:\n\t
with=with %cursor%:\n\t
head="""\n\t%cursor%PROJECT - MODULE\n\n\tDESCRIPTION\n\n\t@copyright: {year} by {developer} <{mail}>\n\t@license: GNU GPL, see COPYING for details.\n"""\n
# Django models
# by Tomasz Karbownicki <tomasz@karbownicki.com>
mclass=class %cursor%(models.Model):\n\t'''%cursor%'''\n\n\tdef __unicode__(self):\n\t\treturn self.XXXXX\n\n\tdef get_absolute_url(self):\n\t\treturn "/XXXXX/%s/" % self.slug\n\n\tclass Meta:\n\t\tverbose_name = "%cursor%"\n\t\tverbose_name_plural = "%cursor%"
mchar=%cursor% = models.CharField(max_length=50, verbose_name=u'%cursor%')
mint=%cursor% = models.IntegerField(verbose_name=u'%cursor%')
mtext=%cursor% = models.TextField(verbose_name=u'%cursor%')
mkey=%cursor% = models.ForeignKey(%cursor%, verbose_name=u'%cursor%')
mimage=%cursor% = models.ImageField(upload_to='', verbose_name=u'%cursor%')
mbool=%cursor% = models.BooleanField(verbose_name=u'%cursor%')
mdate=%cursor% = models.DateField(verbose_name=u'%cursor%', help_text='Format daty: 2009-04-28')
memail=%cursor% = models.EmailField(verbose_name=u'%cursor%')
murl=%cursor% = models.URLField(verbose_name=u'%cursor%')
mslug=%cursor% = models.SlugField(verbose_name=u'%cursor%', unique=True)
license=__license__ = """LGPLv3\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n"""
all=__all__ = [\n\t'FUNC',\n]
debug=print('HERE')  # DEBUG: Print


##===============================================================
# Bhishan extra snippets
arange=np.arange(%cursor%,%cursor%,step =%cursor%) # for integer steps

clobber=# clobber outfolder\noutfolder = '%cursor%'\nif os.path.exists(outfolder):\n    shutil.rmtree(outfolder)\nos.makedirs(outfolder)\nprint('{} {} {}'.format('\\n !!WARNING!! This program will clobber the folder :',outfolder, ''))

fileread=# read data from the file\ninfile = '%cursor%'\nx,y = np.genfromtxt(infile,delimiter='',usecols=(0,1),dtype=None,unpack=True)\nprint('{} {} {}'.format('First row : ',x[0], y[0]))\n

fileread2=# read in a file\ninfile = '%cursor%'\nf=open(infile,'r')\nk=0\ncol0=[]\ncol1=[]\nfor line in f:\n   if not line.startswith("#"):\n    row=line.split()\n    col0.append(float(row[0]))\n    col1.append(float(row[1]))\n    k = k+1\nf.close()

filereadpd=#==============================================================================\n# read in a file\n#\ninfile = '%cursor%'\ncolnames = ['col0', 'col1']\nprint('{} {} {} {}'.format('\\nreading file : ', infile, '','' ))\ndf = pd.read_csv(infile,sep='\\s+', header = None,skiprows = 0,\n                 comment='#',names=colnames,usecols=(0,1))\n\nprint('{} {} {}'.format('input file header: \\n', df.head(),'\\n'))\n

filewrite=# write to a file\noutfile = '%cursor%'\nnp.savetxt(outfile, list(map(list, zip(*[x,y]))),\n           fmt='%s',delimiter=' ', newline='\\n')

filewritepd=# write to a file\noutfile = '%cursor%'\ndf.to_csv(outfile,index=None,header=None,sep='\\t')\nprint('{} {} {}'.format('\\noutput file = ', outfile, '\\n'))\nprint('{} {}'.format('output file header: \\n', df.head()))\n

linspace=np.linspace(%cursor%,%cursor%,num=%cursor%,endpoint=True)

impall=import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n

imnp=import numpy as np

impd=import pandas as pd

implt=import matplotlib.pyplot as plt

interpolate=# interpolation\nfrom scipy import interpolate\nprint('Interpolating ...\n')\nxnew = np.linspace(%cursor%,,num=)\nynew = interpolate.interp1d(x, y, kind='cubic')(xnew)

now=print('\\nCurrent time: ', time.ctime())

parallel=from multiprocessing import Process\n\ndef func1():\n    %cursor%\n\ndef func2():\n\ndef func3():\n\ndef func4():\n\ndef runInParallel(*fns):\n  proc = []\n  for fn in fns:\n    p = Process(target=fn)\n    p.start()\n    proc.append(p)\n  for p in proc:\n    p.join()\n\n# Running parallel\nrunInParallel(func1, func2,func3,func4)

plotall=#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author  : Bhishan Poudel\n# Date    : {date}\n\n# Imports\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# data\nx = np.arange(0,10,1)\ny = np.exp(x)\n\n# subplots\nfig, ax = plt.subplots()\nplt.plot(x,y,color='k',linestyle="--")\n\n# title and axes labels\nplt.title('title')\nplt.xlabel('xlabel', fontsize=10)\nplt.ylabel('ylabel', fontsize=10)\n\n# axes limit\nplt.xlim(0,6)\nplt.ylim(0,1000)\n\n# text marker\ntxt = r'$\mu=100,\  \\sigma=15$'\nplt.text(4, 500, txt)\n\n# major ticks\nplt.xticks(np.arange(min(x), max(x)+1, 2))\nplt.yticks(np.arange(0, 1000+0.001, 200))\n\n# minor ticks\nx_minor_ticks = np.arange(min(x), max(x)+1, 1 )\ny_minor_ticks = np.arange(0, 1000+0.001, 100)\nax.set_xticks(x_minor_ticks, minor=True)\nax.set_yticks(y_minor_ticks, minor=True)\n\n# grid\nplt.grid(False)\n\n# save and show plot\n#plt.savefig("fig1.png",dpi = 200, height = 14, width = 14)\nplt.show()

plotfileall=#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author  : Bhishan Poudel\n# Date    : May 23, 2016\n\n# Imports\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ninfile = 'bhishan.txt'\ncol0,col1 = np.loadtxt(infile, comments="#", skiprows=0, usecols=(0,1), unpack=True)\nplt.plot(col0, col1)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Title')\nplt.show()

pr=print(%cursor%)

prf=print('{} {} {}'.format('%cursor%','', ''))

prn=print("\\n")

prnn=print("\\n")\nprint(%cursor%)

pre=#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Author      : Bhishan Poudel; Physics Graduate Student, Ohio University\n# Date        : {date}\n# Last update : \n#\n# Inputs      : none\n# Outputs     : \n#\n# Info:\n# 1. %cursor%\n#\n\n# Imports\n



prr=print("\\n")\nprint(r"%cursor%")\nprint(%cursor%)\n
prnn=print("\\n")
##=============================================================================
remove_file=os.remove(outfile) if os.path.exists(outfile) else None\n
roundoff=float(str(round(value, 1)))



subplots=plt.subplot(2, 1, 1)  # rows, columns, and plot number\nplt.plot(x1, y1, 'yo-')\nplt.title('%cursor%')\nplt.ylabel('plot 1')\n\nplt.subplot(2, 1, 2)\nplt.plot(x2, y2, 'r.-')\nplt.xlabel('')\nplt.ylabel('plot 2')\n\nplt.show()
subplotsall=#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Author  : Bhishan Poudel\n# Date    : {date}\n\n\n# Imports\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx1 = np.linspace(0.0, 5.0)\nx2 = np.linspace(0.0, 2.0)\n\ny1 = np.cos(2 * np.pi * x1) * np.exp(-x1)\ny2 = np.cos(2 * np.pi * x2)\n\nplt.subplot(2, 1, 1)  # rows, columns, and plot number\nplt.plot(x1, y1, 'yo-')\nplt.title('one plot 2 subplots')\nplt.ylabel('plot 1')\n\nplt.subplot(2, 1, 2)\nplt.plot(x2, y2, 'r.-')\nplt.xlabel('time (s)')\nplt.ylabel('plot 2')\n\nplt.show()

time=import time\n\n# start time\nstart_time = time.time()\n\n# print the time taken\nend_time = time.time()\nseconds = end_time - start_time\nm, s = divmod(seconds, 60)\nh, m = divmod(m, 60)\nd, h = divmod(h, 24)\nprint("\\nTime taken ==> {:2.0f} days, {:2.0f} hours,\\\n{:2.0f} minutes, {:f} seconds.".format( d, h, m, s))

warning=# !!WARNING!! This program will clobber the folder : \n\n# WARNING:\nprint('{} {} {}'.format('\\n !!WARNING!! This program will clobber the folder :',outfolder, ''))


[R]
# Looping and iterative snippets
for=for(%cursor% in %cursor%)%block_cursor%
apply=apply(%cursor%, %cursor%,\n\tFUN = %cursor%)
sapply=sapply(%cursor%,\n\tFUN = %cursor%)
lapply=lapply(%cursor%,\n\tFUN = %cursor%)
# Graphics devices autoclosing
png=png(%cursor%)\n\ndev.off()
pdf=pdf(%cursor%)\n\ndev.off()
bmp=bmp(%cursor%)\n\ndev.off()
postscript=ps(%cursor%)\n\ndev.off()
jpeg=jpeg(%cursor%)\n\ndev.off()
sink=sink(%cursor%)\n\nsink()
# Misc.
function= <- function(%cursor%)%block_cursor%
try= tryCatch(%cursor%,\n\terror = %cursor%)
collapse=paste(%cursor%, collapse = "%cursor%")

[Vala]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

