# Author : Bhishan Poudel
# Source : https://wiki.geany.org/snippets/python/start


## Note :   % = %%    \s = \\s


# Geany's snippets configuration file
#
# use \n or %newline% for a new line
# (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step,
# it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work,
# use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion.
# You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the
#      next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite
# default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names'
# for a full list.
#
# Additionally, you can use most of the template wildcards
# like {developer}, {command:...}, or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections

# [Default]  [Special]  [Keybindings]
# [ActionScript] [C]  [C++]  [C#]
# [Erlang]  [Ferite]  [Fortran]  [Gnuplot]   [Haskell]  [HTML]
# [Java]  [Javascript]  [Latex]
# [PHP] [Python] [R]  [Vala]

[Default]
date={date}
name=Bhishan Poudel
filenames=geany --ft-names
head=# Author    : {developer}\n# Date      : {date}\n\n
h=# Author    : {developer}\n# Date      : {date}\n\n

line=##=======================================================================
lien=##=======================================================================

lines=##=======================================================================\n## %cursor%\n##=======================================================================\n
liens=##=======================================================================\n## %cursor%\n##=======================================================================\n




# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
brace_open=\n{\n\t
brace_close=}\n
block=\n{\n\t%cursor%\n}
block_cursor=\n{\n\t%cursor%\n}\n%cursor%
wordchars=._abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
[Keybindings]
for=<Ctrl>7
head=<Ctrl>h



[Python]

# if else try
if=if %cursor%:\n
else=else:\n    %cursor%
elif=elif %cursor%:\n
try=try:\n    %cursor%\nexcept Exception, e:\n
for=for i in range(%cursor%):

# function
def=def %cursor%():\n    %cursor%\n
def2=def f():\n    '''\n# Depends :\n#\n# Outputs :\n#\n# Returns :\n#\n# Info:\n# 1.\n#\n    '''\n\n    pass\n\n\n
doc=\n    """ %cursor% """\n
doc2=\n    '''\n# Depends :\n#\n# Outputs :\n#\n# Returns :\n#\n# Info:\n# 1.\n#\n    '''

# class
class=class %cursor%(object):\n    """ Class doc """\n    \n    def __init__ (self):\n        """ Class initialiser """\n            pass
.=self.%cursor%




# main
main=if __name__ == '__main__':\n    %cursor%
maint=##==============================================================================\n## Main program\n##==============================================================================\nif __name__ == '__main__':\n\n    # beginning time\n    begin_time,begin_ctime = time.time(), time.ctime()\n\n    # run main program\n    %cursor%\n\n    # print the time taken\n    end_time,end_ctime  = time.time(), time.ctime()\n    seconds             = end_time - begin_time\n    m, s                = divmod(seconds, 60)\n    h, m                = divmod(m, 60)\n    d, h                = divmod(h, 24)\n    print('\\nBegin time: ', begin_ctime,'\\nEnd   time: ', end_ctime,'\\n' )\n    print("Time taken: {0:.0f} days, {1:.0f} hours, \\\n          {2:.0f} minutes, {3:f} seconds.".format(d, h, m, s))\n


# head
h=#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n# Author      : Bhishan Poudel; Physics PhD Student, Ohio University\n# Date        : {date}\n# Last update : \n#\n# Imports\n

h2=#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n# Author      : Bhishan Poudel; Physics PhD Student, Ohio University\n# Date        : {date}\n# Last update : \n#\n# Depends     : none\n#\n# Outputs     : \n#\n# Info:\n# 1. %cursor%\n#\n#\n#\n# Imports\n


## imports
impall=import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n
imppar=import multiprocessing as mp\nfrom joblib import Parallel,delayed\n\n
mp=import multiprocessing as mp
np=import numpy as np
pd=import pandas as pd
df=from pandas import DataFrame as DF
plt=import matplotlib.pyplot as plt
sp=import scipy as sp
#ap=import astropy.io
#fits=from astropy.io import fits
#getheader=from astropy.io.fits import getheader
#getval=from astropy.io.fits import getval
#getdata=from astropy.io.fits import getdata


# prints
pr=print(%cursor%)
rp=print(%cursor%)
pra=print(a)
prb=print(a)
prc=print(a)
prd=print(DF(%cursor%))
prdf=print(DF(%cursor%))
prf=print('{} {} {}'.format('%cursor%','', ''))
prn=print("\\n")
prnn=print("\\n")\nprint(%cursor%)

prr=print("\\n")\nprint(r"%cursor%")\nprint(%cursor%)\n
prnn=print("\\n")


# numpy
arange=np.arange(%cursor%,%cursor%,step =%cursor%) # for integer steps
linspace=np.linspace(start=%cursor%,stop=%cursor%,num=%cursor%,endpoint=True)






# file read/write
fileread=infile = '%cursor%'\nx = np.genfromtxt(infile,delimiter=None,usecols=(0),dtype=str,unpack=True)\ny = np.genfromtxt(infile,delimiter=None,usecols=(1),dtype=float,unpack=True)\nprint('{} {} {} {}'.format('\\nFirst row    : ', x[0], y[0],'\\n ' ))\n


fileread2=##=============================================================================\n# read in a file\ninfile = '%cursor%'\nprint('{} {} {} {}'.format('\\nreading file : ', infile, ' ',' ' ))\nx = np.genfromtxt(infile,delimiter=None,usecols=(0),dtype=str,unpack=True)\ny,z = np.genfromtxt(infile,delimiter=None,usecols=(1,2),dtype=float,unpack=True)\nprint('{} {} {} {}'.format('First row    : ', x[0], ' ','\\n ' ))\n##=============================================================================

fileread3=# read in a file\ninfile = '%cursor%'\nf=open(infile,'r')\nk=0\ncol0=[]\ncol1=[]\nfor line in f:\n   if not line.startswith("#"):\n    row=line.split()\n    col0.append(float(row[0]))\n    col1.append(float(row[1]))\n    k = k+1\nf.close()

filereadpd=#==============================================================================\n# read in a file\n#\ninfile = '%cursor%'\ncolnames = ['col0', 'col1']\nprint('{} {} {} {}'.format('\\nreading file : ', infile, '','' ))\ndf = pd.read_csv(infile,sep='\\s+', header = None,skiprows = 0,\n                 comment='#',names=colnames,usecols=(0,1))\n\nprint('{} {} {}'.format('input file header: \\n', df.head(),'\\n'))\n

filewrite=# write to a file\noutfile = '%cursor%'\nnp.savetxt(outfile, [x,y], fmt='%d',delimiter=' ', newline='\\n')

filewrite2=# write to a file\noutfile = '%cursor%.dat'\nprint('Creating : ', outfile)\nwith open(outfile,'w') as f:\n\n    # write header\n    header = '# x  y '\n    print(header,file=f)\n\n    # write data\n    for i in range(len(x)):\n        print(x[i],y[i],sep='   ', file=f)\n




filewritepd=# write to a file\noutfile = '%cursor%'\ndf.to_csv(outfile,index=None,header=None,sep='\\t')\nprint('{} {} {}'.format('\\noutput file = ', outfile, '\\n'))\nprint('{} {}'.format('output file header: \\n', df.head()))\n





# plots
plotall=#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author  : Bhishan Poudel\n# Date    : {date}\n\n# Imports\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# data\nx = np.arange(0,10,1)\ny = np.exp(x)\n\n# subplots\nfig, ax = plt.subplots()\nplt.plot(x,y,color='k',linestyle="--")\n\n# title and axes labels\nplt.title('title')\nplt.xlabel('xlabel', fontsize=10)\nplt.ylabel('ylabel', fontsize=10)\n\n# axes limit\nplt.xlim(0,6)\nplt.ylim(0,1000)\n\n# text marker\ntxt = r'$\mu=100,\  \\sigma=15$'\nplt.text(4, 500, txt)\n\n# major ticks\nplt.xticks(np.arange(min(x), max(x)+1, 2))\nplt.yticks(np.arange(0, 1000+0.001, 200))\n\n# minor ticks\nx_minor_ticks = np.arange(min(x), max(x)+1, 1 )\ny_minor_ticks = np.arange(0, 1000+0.001, 100)\nax.set_xticks(x_minor_ticks, minor=True)\nax.set_yticks(y_minor_ticks, minor=True)\n\n# grid\nplt.grid(False)\n\n# save and show plot\n#plt.savefig("fig1.png",dpi = 200, height = 14, width = 14)\nplt.show()


plotfileall=#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Author  : Bhishan Poudel\n# Date    : May 23, 2016\n\n# Imports\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ninfile = 'bhishan.txt'\ncol0,col1 = np.loadtxt(infile, comments="#", skiprows=0, usecols=(0,1), unpack=True)\nplt.plot(col0, col1)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Title')\nplt.show()


subplots=plt.subplot(2, 1, 1)  # rows, columns, and plot number\nplt.plot(x1, y1, 'yo-')\nplt.title('%cursor%')\nplt.ylabel('plot 1')\n\nplt.subplot(2, 1, 2)\nplt.plot(x2, y2, 'r.-')\nplt.xlabel('')\nplt.ylabel('plot 2')\n\nplt.show()

subplotsall=#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Author  : Bhishan Poudel\n# Date    : {date}\n\n\n# Imports\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx1 = np.linspace(0.0, 5.0)\nx2 = np.linspace(0.0, 2.0)\n\ny1 = np.cos(2 * np.pi * x1) * np.exp(-x1)\ny2 = np.cos(2 * np.pi * x2)\n\nplt.subplot(2, 1, 1)  # rows, columns, and plot number\nplt.plot(x1, y1, 'yo-')\nplt.title('one plot 2 subplots')\nplt.ylabel('plot 1')\n\nplt.subplot(2, 1, 2)\nplt.plot(x2, y2, 'r.-')\nplt.xlabel('time (s)')\nplt.ylabel('plot 2')\n\nplt.show()

# time
now=print('\\nCurrent time: ', time.ctime())
time=import time\n\n# beginning time\nprogram_begin_time = time.time()\nbegin_ctime        = time.ctime()\n\n\n# print the time taken\nprogram_end_time = time.time()\nend_ctime        = time.ctime()\nseconds          = program_end_time - program_begin_time\nm, s             = divmod(seconds, 60)\nh, m             = divmod(m, 60)\nd, h             = divmod(h, 24)\nprint('\\nBegin time: ', begin_ctime)\nprint('End   time: ', end_ctime,'\\n')\nprint("Time taken: {0:.0f} days, {1:.0f} hours, \\\n      {2:.0f} minutes, {3:f} seconds.".format(d, h, m, s))\n



# process
subprocess=commands = " " +\\\n" %cursor% ; " +\\\n"  ; " +\\\n" "\n\n\nprint("\\nRunning commands :\\n", commands, "\\n")\nsubprocess.call(commands,shell=True)\n
call=import subprocess\ncommands = '''\necho a\necho b\n'''\n\nsubprocess.call(commands,shell=True)\n

run_process=import subprocess,time,sys\n\n\n\n##==============================================================================\n# Usage   :Run a process using subprocess.Popen\n# Command : run_process("Running example.py", ["python3", 'example.py', 'arg1' ])\n##==============================================================================\ndef run_process(name, args,):\n    print("-------------------------------------------------")\n    print("Running: %s\\nCommand:"%name)\n    for arg in args:\n        print(arg, end=' ')\n    print("")\n    print("---------------------------------------------------")\n\n    subprogram_start_time = time.time()\n    process = subprocess.Popen(args)\n\n    process.communicate()\n    if process.returncode != 0:\n        print("Error: %s did not terminate correctly. \\\n              Return code: %i."%(name, process.returncode))\n        sys.exit(1)\n\n    # print time\n    subprogram_end_time = time.time()\n    sec                 = subprogram_end_time - subprogram_start_time\n    m, s                = divmod(sec, 60)\n    h, m                = divmod(m, 60)\n    d, h                = divmod(h, 24)\n    print("\\nTime for'{}' ==> {:2.0f} days, {:2.0f} hr,\\\n         {:2.0f} min, {:f} sec.".format( name, d, h, m, s))\n\n    print("End of command: %s\\nCommand:"%name)\n    print("------------------------------------------------")\n

parallel=from multiprocessing import Process\n\ndef func1():\n    %cursor%\n\ndef func2():\n\ndef func3():\n\ndef func4():\n\ndef runInParallel(*fns):\n  proc = []\n  for fn in fns:\n    p = Process(target=fn)\n    p.start()\n    proc.append(p)\n  for p in proc:\n    p.join()\n\n# Running parallel\nrunInParallel(func1, func2,func3,func4)

parallel2=from joblib import Parallel, delayed\nimport multiprocessing as mp\n\n\n\n# function\ndef my_func(i):\n    return i * i\n\n# run in parallel\nnum_cores = mp.cpu_count()\nargs = range(10)\nresults = Parallel(n_jobs=num_cores)(delayed(my_func)(i) for i in args)\n\n# print\nprint(list(range(10)))\nprint(results)\n



# user defined functions
replace=##==============================================================================\n## replace_outdir\n##==============================================================================\ndef replace_outdir(outdir):\n\n    # imports\n    import shutil,os\n\n    if os.path.exists(outdir):\n        print('Replacing folder: ', outdir)\n        shutil.rmtree(outdir)\n        os.makedirs(outdir)\n    else:\n        print('Making new folder: ', outdir)\n        os.makedirs(outdir)\n\n\n\n\noutdir = '%cursor%'\nreplace_outdir(outdir)\n
interpolate=# interpolation\nfrom scipy import interpolate\nprint('Interpolating ...\n')\nxnew = np.linspace(%cursor%,,num=)\nynew = interpolate.interp1d(x, y, kind='cubic')(xnew)



# some completions
remove_file=os.remove(outfile) if os.path.exists(outfile) else None\n
roundoff=float(str(round(value, 1)))
loop=# print loop info\nprint("\\n\\n"+'#'*50+"\\n# Running loop: ", i, '\\n'+'#'*50+'\\n\\n')






































[ActionScript]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Bibtex]
head=%Author: Bhishan Poudel

[C]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
_ts=typedef struct\n{\n\t\n}\n%cursor%;
_s=struct %cursor%\n{\n\t\n};\n
_m=int main(int argc, char *argv[])\n{\n\treturn 0;\n}\n
#Note: change date format in Preference > Templates
h=/* Author      : Bhishan Poudel; Physics Graduate Student, Ohio University\n * Date        : {date}\n * Last update :\n *\n * Compile     : gcc -Wall a.c -lm\n * Run         :\n *\n *\n * Inputs      : 1.\n *\n *\n * Outputs     : 1.\n *\n * Info        :\n *\n */\n\n

h2=/* Author      : Bhishan Poudel; Physics Graduate Student, Ohio University\n * Date        : {date}\n * Last update :\n *\n * Compile     : gcc -Wall a.c -lm\n * Run         :\n *\n *\n * Inputs      : 1.\n *\n *\n * Outputs     : 1.\n *\n * Info        :\n *\n */\n\n// preprocessor\n#include<stdio.h>\n\n// main program\nint main(int argc, char *argv[])\n{\n  %cursor%\n\nreturn 0;\n}\n
pr=printf("%cursor%\\n");


[C++]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[C#]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Erlang]
case=case %cursor% of\n\t%cursor% -> %cursor%\nend
if=if\n\t%cursor% -> %cursor%\nend
begin=begin\n\t%cursor%\nend
fun=fun(%cursor%) ->\n\t%cursor%\nend
try=try %cursor% of\n\t%cursor% ->\n\t%cursor%\ncatch\n\t%cursor% ->\n\t%cursor%\nend
module=-module(%cursor%).
export=-export(%cursor%).
compile=-compile(%cursor%).
include=-include(%cursor%).

[Ferite]
iferr=iferr%block_cursor%fix%block%
monitor=monitor%block_cursor%handle%block%

[Fortran]
func=function %cursor%()\n\timplicit none\nend function
sub=subroutine %cursor%()\n\timplicit none\nend subroutine
mod=module %cursor%\n\t\nend module
prog=program %cursor%\n\t\nend program
imp=implicit none
dim=dimension(%cursor%)
int=integer
do=do %cursor%\n\t\nend do
head=! Author   : Bhishan Poudel\n! Date     : {date}\n\nprogram\nimplicit none\n\n  %cursor%\n\nend program

[Galfit]
head=# Author   : Bhishan Poudel\n# Date     : {date}\n\n

[Gnuplot]

[Haskell]

[HTML]
table=<table>\n\t<tr>\n\t\t<td>%cursor%</td>\n\t</tr>\n</table>


[Java]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Javascript]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Latex]
chap=\\chapter{%cursor%}\\label{chap:}
sec=\\section{%cursor%}\\label{sec:}
sub=\\subsection{%cursor%}\\label{subsec:}
ssub=\\subsubsection{%cursor%}\\label{subsubsec:}
emph=\\emph{%cursor%}
itemize=\\begin{itemize}\n\t\\item %cursor% \n\\end{itemize}
enum=\\begin{enumerate}\n\t\\item %cursor% \n\\end{enumerate}
enumerate=\\begin{enumerate}\n%ws%\\item %cursor%\n\\end{enumerate}
desc=\\begin{description}\n%ws%\\item %cursor%\n\\end{description}
item=\\item %cursor%
ref=\\ref{%cursor%}
page=\\pageref{%cursor%}
name=\\nameref{%cursor%}
frame=\\begin{frame}\n%ws%\\frametitle{%cursor%}\n%ws%%cursor%\n\\end{frame}
block=\\begin{block}{%cursor%}\n%ws%%cursor%\n\\end{block}
align=\\begin{align}\n%cursor%\n\\end{align}
equation=\\begin{equation}\n%cursor%\n\\end{equation}
eqnarray=\\begin{eqnarray}\n%cursor%\n\\end{eqnarray}
# \cite [ prenote ][ postnote ]{ key }
cite=\\cite[%cursor%][%cursor%]{%cursor%}
#\parencite [ prenote ][ postnote ]{ key }
parencite=\\parencite[%cursor%][%cursor]{%cursor%}
#\textcite [ prenote ][ postnote ]{ key }
textcite=\\textcite[%cursor%][%cursor]{%cursor%}
#\citeauthor{key}
aut=\\citeauthor{%cursor%}
#\citetitle{key}
citetitle=\\citetitle{%cursor%}
#\citetitle* [ prenote ][ postnote ]{ key }
citefulltitle=\\citetitle*{%cursor%}
#\citeyear [ prenote ][ postnote ]{ key }
citeyear=\\citeyear{%cursor%}

[Markdown]
h=**Topic       :  **   \n\n**Author      : Bhishan Poudel**  \n**Date        : {date} **  \n**Last Update :  **   \n  ___\n\n
head=**Topic :  **   \n\n**Author : Bhishan Poudel**  \n**Date   : {date} **  \n  ___\n\n
center=<dd>  %cursor%  </dd>
comment=[//]: # (  %cursor%  )
link=[%cursor%](https://www.google.com)
links=[ %cursor% ][1]\n[1]: https://www.google.com
list=\n\n+ a\n+ b\n+ c\n
image=![](a.png?raw=true)
image2=![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"

space=&nbsp;
s=&nbsp;

table=| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n

youtube=[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/6A5EpqqDOdk/0.jpg)](http://www.youtube.com/watch?v=6A5EpqqDOdk)



[Matlab/Octave]
if=if ()\n  %cursor%\nelse\n  %cursor%\nend\n
ifelse=if ()\n  %cursor%\nelseif ()\n  %cursor%\nelse\n  %cursor%\nend\n
while=while ()\n    %cursor%\nend\n
head=#!/usr/local/octave/3.8.0/bin/octave -qf \n% Author    : Bhishan Poudel \n% Date      : {date}\n\n
head1=#!/usr/bin/octave -qf \n% Author    : Bhishan Poudel \n% Date      : {date}\n% Ref       : %cursor% \n\n
fpr=fprintf('%cursor%\\n');
pr=fprintf('%cursor%\\n');
pr=fprintf('%cursor%\\n');
head=#!/usr/bin/octave -qf \n% Author    : Bhishan Poudel \n% Date      : {date}\n\n
switch=switch true\n  case ()\n    %cursor%\n  case ()\n    %cursor%\n  case ()\n    %cursor%\n  case ()\n    %cursor%\n  otherwise\n    %cursor%\nend\n
switch_=x = 5;\nswitch true\n  case x > 10\n    fprintf(1, 'x is greater than 10\\n')\n  case x > 8\n    fprintf(1, 'x is greater than 8\\n')\n  case x < 6\n    fprintf(1, 'x is less than 6\\n')\n  case y == 3\n    fprintf(1, 'y equals three\\n')\n  otherwise\n    fprintf(1, 'no conditions were met\\n')\nend

[Phosim]
icat=Unrefracted_RA_deg 0\nUnrefracted_Dec_deg 0\nUnrefracted_Azimuth 0\nUnrefracted_Altitude 89\nSlalib_date 1994/7/19/0.298822999997\nOpsim_rotskypos 0\nOpsim_rottelpos 0\nOpsim_moondec -90\nOpsim_moonra 180\nOpsim_expmjd 49552.3\nOpsim_moonalt -90\nOpsim_sunalt -90\nOpsim_filter 2\nOpsim_dist2moon 180.0\nOpsim_moonphase 10.0\nOpsim_obshistid 99999999\nOpsim_rawseeing 0.65\nSIM_SEED 1000\nSIM_MINSOURCE 1\nSIM_TELCONFIG 0\nSIM_CAMCONFIG 1\nSIM_VISTIME 15000.0\nSIM_NSNAP 1\nobject 0 0.0 0.0 20 ../sky/sed_flat.txt 0 0 0 0 0 0 fb.fits 0.09 0.0 none



[PHP]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%


[R]
# Looping and iterative snippets
for=for(%cursor% in %cursor%)%block_cursor%
apply=apply(%cursor%, %cursor%,\n\tFUN = %cursor%)
sapply=sapply(%cursor%,\n\tFUN = %cursor%)
lapply=lapply(%cursor%,\n\tFUN = %cursor%)
# Graphics devices autoclosing
png=png(%cursor%)\n\ndev.off()
pdf=pdf(%cursor%)\n\ndev.off()
bmp=bmp(%cursor%)\n\ndev.off()
postscript=ps(%cursor%)\n\ndev.off()
jpeg=jpeg(%cursor%)\n\ndev.off()
sink=sink(%cursor%)\n\nsink()
# Misc.
function= <- function(%cursor%)%block_cursor%
try= tryCatch(%cursor%,\n\terror = %cursor%)
collapse=paste(%cursor%, collapse = "%cursor%")

